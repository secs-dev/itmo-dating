openapi: 3.0.3
info:
  title: ITMO Dating People
  version: 0.0.1
  description: Service is responsible for storage of user profiles.
  contact:
    name: ITMO Dating Team
    url: https://github.com/secs-dev/itmo-dating/issues
servers:
  - url: /api
    x-internal: true
security:
  - bearerAuth: [ USER, ADMIN ]
tags:
  - name: Monitoring
  - name: People
  - name: Photos
  - name: Faculties
  - name: Locations
paths:
  /monitoring/healthcheck:
    get:
      tags: [ Monitoring ]
      summary: Checks if service is alive
      description: Returns 'ok', if service is alive, else we will cry
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: string
                pattern: ^[a-z]+$
                maxLength: 32
                example: ok
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
        default:
          $ref: "#/components/responses/Unexpected"
  /people:
    get:
      tags: [ People ]
      summary: Get filtered people list
      description: Returns list of people, filtered by given conditions
      security:
        - bearerAuth: [ ADMIN ]
      parameters:
        - name: offset
          in: query
          description: Count of skipped elements from the head of a result list
          required: false
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
            maximum: 10000000
            example: 32
        - name: limit
          in: query
          description: Maximum count of elements to return
          required: false
          schema:
            type: integer
            format: int64
            default: 20
            minimum: 1
            maximum: 1000
            example: 8
        - name: first_name
          in: query
          description: Pattern for a first name
          required: false
          schema:
            $ref: "#/components/schemas/RegexPattern"
        - name: last_name
          in: query
          description: Pattern for a last name
          required: false
          schema:
            $ref: "#/components/schemas/RegexPattern"
        - name: pictures_count_min
          in: query
          description: Minimum count of pictures in profile
          required: false
          schema:
            $ref: "#/components/schemas/PicturesCount"
          example: 2
        - name: pictures_count_max
          in: query
          description: Maximum count of pictures in profile
          required: false
          schema:
            $ref: "#/components/schemas/PicturesCount"
          example: 4
        - name: topic_id
          in: query
          description: IDs of topics interested for person. Logical or.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TopicId"
            maxItems: 32
        - name: height_min
          in: query
          description: Minimum height of a person
          required: false
          schema:
            $ref: "#/components/schemas/PersonHeight"
          example: 160
        - name: height_max
          in: query
          description: Maximum height of a person
          required: false
          schema:
            $ref: "#/components/schemas/PersonHeight"
          example: 180
        - name: birthday_min
          in: query
          description: Minimum birthday of a person
          required: false
          schema:
            type: string
            format: date
            example: 1990-01-01
        - name: birthday_max
          in: query
          description: Maximum birthday of a person
          required: false
          schema:
            type: string
            format: date
            example: 2000-12-31
        - name: zodiac
          in: query
          description: Zodiac signs to search. Logical or.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ZodiacSign"
            maxItems: 12
        - name: faculty
          in: query
          description: Faculties to search. Logical or.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/FacultyId"
            maxItems: 128
        - name: latitude
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Latitude"
        - name: longitude
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Longitude"
        - name: radius
          in: query
          required: false
          schema:
            type: integer
            description: Radius of circle in meters with center at (latitude, longitude)
            format: int32
            minimum: 1
            maximum: 100000
            example: 1500
        - name: updated_min
          in: query
          description: Minimal updated moment
          required: false
          schema:
            $ref: "#/components/schemas/UpdateMoment"
        - name: updated_max
          in: query
          description: Maximal updated moment
          required: false
          schema:
            $ref: "#/components/schemas/UpdateMoment"
        - name: sort_by
          in: query
          description: Sorting keys
          required: false
          explode: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PersonSortingKey"
            maxItems: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
                maxItems: 10000
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
        default:
          $ref: "#/components/responses/Unexpected"
  /people/{person_id}:
    get:
      tags: [ People ]
      summary: Get person by id
      description: Returns a person with a given id
      parameters:
        - $ref: "#/components/parameters/PersonIdPath"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonVariant"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
        default:
          $ref: "#/components/responses/Unexpected"
    delete:
      tags: [ People ]
      summary: Delete person by id
      description: Deletes a person with a given id forever?
      security:
        - bearerAuth: [ ADMIN ]
      parameters:
        - $ref: "#/components/parameters/PersonIdPath"
      responses:
        "204":
          description: Person was deleted
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
        default:
          $ref: "#/components/responses/Unexpected"
    patch:
      tags: [ People ]
      summary: Update a person
      description: Updates a person with a given id
      parameters:
        - $ref: "#/components/parameters/PersonIdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonPatch"
      responses:
        "204":
          description: Updated
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
        default:
          $ref: "#/components/responses/Unexpected"
  /people/{person_id}/photos:
    post:
      tags: [ Photos ]
      summary: Add a profile photo
      description: Adds a profile photo for a person profile with a given id
      security:
        - bearerAuth: [ USER ]
      parameters:
        - $ref: "#/components/parameters/PersonIdPath"
      requestBody:
        required: true
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Picture"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
        default:
          $ref: "#/components/responses/Unexpected"
  /people/{person_id}/photos/{picture_id}:
    get:
      tags: [ Photos ]
      summary: Get a person profile photo
      description: Returns a person profile photo by id
      security:
        - bearerAuth: [ USER ]
      parameters:
        - $ref: "#/components/parameters/PersonIdPath"
        - $ref: "#/components/parameters/PictureIdPath"
      responses:
        "200":
          description: "OK"
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
        default:
          $ref: "#/components/responses/Unexpected"
    delete:
      tags: [ Photos ]
      summary: Delete a profile photo
      description: Removes a person profile photo by id
      security:
        - bearerAuth: [ USER ]
      parameters:
        - $ref: "#/components/parameters/PersonIdPath"
        - $ref: "#/components/parameters/PictureIdPath"
      responses:
        "204":
          description: Deleted
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
        default:
          $ref: "#/components/responses/Unexpected"
  /faculties:
    get:
      tags: [ Faculties ]
      summary: Get all faculties
      description: Returns all faculties list
      security:
        - bearerAuth: [ USER ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Faculty"
                maxItems: 512
  /locations:
    get:
      tags: [ Locations ]
      summary: Get all locations
      description: Returns all locations list
      security:
        - bearerAuth: [ USER ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"
                maxItems: 512
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Supports RFC8725
  parameters:
    PersonIdPath:
      name: person_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/PersonId"
    PictureIdPath:
      name: picture_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/PictureId"
    IdempotencyKeyHeader:
      name: Idempotency-Key
      in: header
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 48
        example: 550e8400-e29b-41d4-a716-446655440000
  schemas:
    PersonId:
      type: integer
      description: A unique key of a person, autogenerated
      format: int64
      minimum: 1
      maximum: 10000000
      example: 1234567
    PersonName:
      type: string
      description: Either first or last person name
      pattern: ^[A-Za-z,.'-]{2,32}$
      maxLength: 32
      example: Ivan
    PersonHeight:
      type: integer
      description: A height of the person in centimeters
      format: int32
      minimum: 50
      maximum: 280
      example: 172
    PersonStatus:
      type: string
      description: A status of the person
      enum:
        - draft
        - ready
      example: ready
    PersonInfo:
      type: object
      description: A draft of a person
      properties:
        firstName:
          $ref: "#/components/schemas/PersonName"
        lastName:
          $ref: "#/components/schemas/PersonName"
        interests:
          type: array
          items:
            $ref: "#/components/schemas/Interest"
          minItems: 0
          maxItems: 8
          uniqueItems: true
        height:
          $ref: "#/components/schemas/PersonHeight"
        birthday:
          type: string
          description: A date when person was born
          format: date
        facultyId:
          $ref: "#/components/schemas/FacultyId"
        locationId:
          $ref: "#/components/schemas/LocationId"
    PersonPatch:
      allOf:
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/PersonStatus'
          required:
            - status
        - $ref: "#/components/schemas/PersonInfo"
    PersonDraft:
      allOf:
        - $ref: "#/components/schemas/PersonVariant"
        - $ref: "#/components/schemas/PersonInfo"
    Person:
      description: A person, registered in a system
      allOf:
        - $ref: "#/components/schemas/PersonVariant"
        - $ref: "#/components/schemas/PersonInfo"
        - type: object
          required:
            - firstName
            - lastName
            - interests
            - height
            - birthday
            - faculty
            - location
        - type: object
          properties:
            zodiac:
              $ref: "#/components/schemas/ZodiacSign"
          required:
            - zodiac
    PersonVariant:
      type: object
      discriminator:
        propertyName: status
        mapping:
          draft: '#/components/schemas/PersonDraft'
          ready: '#/components/schemas/Person'
      properties:
        status:
          $ref: '#/components/schemas/PersonStatus'
        userId:
          $ref: "#/components/schemas/PersonId"
      required:
        - status
        - userId
    PersonSortingKey:
      type: string
      enum:
        - first_name
        - last_name
        - height
        - birthday
        - updated
        - -first_name
        - -last_name
        - -height
        - -birthday
        - -updated
    ZodiacSign:
      type: string
      description: Astrological sign, caclulated based on a birthday
      enum:
        - aries
        - taurus
        - gemini
        - cancer
        - leo
        - virgo
        - libra
        - scorpio
        - sagittarius
        - capricorn
        - aquarius
        - pisces
    FacultyId:
      type: integer
      description: A unique key of a faculty
      format: int64
      minimum: 1
      maximum: 1024
      example: 234
    Faculty:
      type: object
      description: Where does a person study
      properties:
        id:
          $ref: "#/components/schemas/FacultyId"
        longName:
          type: string
          description: A unique name of a faculty
          pattern: ^[A-Z][a-z]{4,64}$
          maxLength: 64
          example: Software Engineering and Computer Systems
    Latitude:
      type: number
      description: The north-south position on the Earth surface
      format: double
      minimum: -90
      maximum: 90
      example: 59.957478
    Longitude:
      type: number
      description: The east-west position on the Earth surface
      format: double
      minimum: 0
      maximum: 180
      example: 30.308014
    PictureId:
      type: integer
      description: A unique key of a picture
      format: int64
      minimum: 1
      maximum: 10000000
      example: 1234567
    Picture:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/PictureId"
      required:
        - id
    Interest:
      type: object
      properties:
        topicId:
          $ref: "#/components/schemas/TopicId"
        level:
          type: integer
          description: A level of interest
          format: int32
          minimum: 1
          maximum: 5
      required:
        - topicId
        - level
    TopicId:
      type: integer
      description: A unique key of a topic
      format: int64
      minimum: 1
      maximum: 1024
      example: 234
    Topic:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/TopicId"
        name:
          type: string
          description: A unique name of a topic
          pattern: ^[A-Z][a-z]{3,32}$
          maxLength: 32
          example: Programming
        icon:
          $ref: "#/components/schemas/Picture"
        color:
          type: string
          description: An RGB color in the hex format
          pattern: ^#[A-F0-9]{6}$
          maxLength: 7
          example: "#6495ED"
      required:
        - id
        - name
        - icon
        - color
    LocationId:
      type: integer
      description: A unique key of a location
      format: int64
      minimum: 1
      maximum: 100000
      example: 234
    Location:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/LocationId"
        name:
          type: string
          description: User readable location name
          pattern: ^[A-Za-z ,.-]{3,128}$
          maxLength: 128
          example: ITMO University, Kronverkskiy Avenue
        coordinates:
          $ref: "#/components/schemas/Coordinates"
      required:
        - name
        - coordinates
    Coordinates:
      type: object
      properties:
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"
      required:
        - latitude
        - longitude
    UpdateMoment:
      type: string
      format: date-time
      description: A moment when this object was updated, autogenerated
      example: 2024-04-14T13:32:42Z
    RegexPattern:
      type: string
      example: Va.ya
      pattern: ^[A-Za-z.?*+]{1,64}$
      maxLength: 64
    PicturesCount:
      type: integer
      format: int32
      minimum: 1
      maximum: 16
      example: 4
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: HTTP Status Code
          minimum: 100
          maximum: 600
          example: 400
        status:
          type: string
          description: HTTP Status Description
          pattern: ^[A-Za-z0-9 .,'-]+$
          maxLength: 64
          example: Bad Request
        message:
          type: string
          description: Detailed Message
          pattern: ^[A-Za-z0-9 .,'-]+$
          maxLength: 128
          example: Username must contain only latin letter
      required:
        - code
        - status
        - message
  responses:
    "400":
      description: Invalid arguments
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralError"
    "401":
      description: Authorization error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralError"
    "403":
      description: Access forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralError"
    "404":
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralError"
    "500":
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralError"
    "503":
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralError"
    Unexpected:
      description: Unknown error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralError"
