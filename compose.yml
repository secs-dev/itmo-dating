services:
  authik:
    build:
      context: ./backend/authik
    environment:
      POSTGRES_DB: ${ITMO_DATING_AUTHIK_POSTGRES_DB?:err}
      POSTGRES_USER: ${ITMO_DATING_AUTHIK_POSTGRES_USER?:err}
      POSTGRES_PASSWORD: ${ITMO_DATING_AUTHIK_POSTGRES_PASSWORD?:err}
      TOKEN_SIGN_KEY_PUBLIC: ${ITMO_DATING_TOKEN_SIGN_KEY_PUBLIC?:err}
      TOKEN_SIGN_KEY_PRIVATE: ${ITMO_DATING_AUTHIK_TOKEN_SIGN_KEY_PRIVATE?:err}
      TELEGRAM_BOT_TOKEN: ${ITMO_DATING_AUTHIK_TELEGRAM_BOT_TOKEN?:err}
      KEY_STORE_PASSWORD: ${ITMO_DATING_KEY_STORE_PASSWORD?:err}
    ports:
      - 8082:8080
    depends_on:
      authik-database:
        condition: service_healthy
  authik-database:
    image: postgres
    environment:
      POSTGRES_DB: ${ITMO_DATING_AUTHIK_POSTGRES_DB?:err}
      POSTGRES_USER: ${ITMO_DATING_AUTHIK_POSTGRES_USER?:err}
      POSTGRES_PASSWORD: ${ITMO_DATING_AUTHIK_POSTGRES_PASSWORD?:err}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      timeout: 1s
      retries: 16
  gateway:
    build:
      context: ./backend/gateway
    environment:
      KEY_STORE_PASSWORD: ${ITMO_DATING_KEY_STORE_PASSWORD?:err}
    ports:
      - 8083:8080
  matchmaker:
    build:
      context: ./backend/matchmaker
    environment:
      POSTGRES_DB: ${ITMO_DATING_MATCHMAKER_POSTGRES_DB?:err}
      POSTGRES_USER: ${ITMO_DATING_MATCHMAKER_POSTGRES_USER?:err}
      POSTGRES_PASSWORD: ${ITMO_DATING_MATCHMAKER_POSTGRES_PASSWORD?:err}
      TOKEN_SIGN_KEY_PUBLIC: ${ITMO_DATING_TOKEN_SIGN_KEY_PUBLIC?:err}
      KEY_STORE_PASSWORD: ${ITMO_DATING_KEY_STORE_PASSWORD?:err}
    ports:
      - 8080:8080
    depends_on:
      matchmaker-database:
        condition: service_healthy
  matchmaker-database:
    image: postgres
    environment:
      POSTGRES_DB: ${ITMO_DATING_MATCHMAKER_POSTGRES_DB?:err}
      POSTGRES_USER: ${ITMO_DATING_MATCHMAKER_POSTGRES_USER?:err}
      POSTGRES_PASSWORD: ${ITMO_DATING_MATCHMAKER_POSTGRES_PASSWORD?:err}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      timeout: 1s
      retries: 16
  people:
    build:
      context: ./backend/people
    environment:
      POSTGRES_DB: ${ITMO_DATING_PEOPLE_POSTGRES_DB?:err}
      POSTGRES_USER: ${ITMO_DATING_PEOPLE_POSTGRES_USER?:err}
      POSTGRES_PASSWORD: ${ITMO_DATING_PEOPLE_POSTGRES_PASSWORD?:err}
      TOKEN_SIGN_KEY_PUBLIC: ${ITMO_DATING_TOKEN_SIGN_KEY_PUBLIC?:err}
      KEY_STORE_PASSWORD: ${ITMO_DATING_KEY_STORE_PASSWORD?:err}
    ports:
      - 8081:8080
    depends_on:
      people-database:
        condition: service_healthy
  people-database:
    image: postgres
    environment:
      POSTGRES_DB: ${ITMO_DATING_PEOPLE_POSTGRES_DB?:err}
      POSTGRES_USER: ${ITMO_DATING_PEOPLE_POSTGRES_USER?:err}
      POSTGRES_PASSWORD: ${ITMO_DATING_PEOPLE_POSTGRES_PASSWORD?:err}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      timeout: 1s
      retries: 16
  tg-miniapp:
    build:
      context: frontend
    ports:
      - "443:443"
