openapi: 3.0.3
info:
  title: ITMO Dating People
  version: 0.0.1
servers:
  - url: /api/v1
paths:
  /monitoring/status:
    get:
      tags: [Monitoring]
      summary: Checks if service is alive
      description: Returns 'ok', if service is alive, else we will cry
      responses:
        200:
          description: OK
          content:
            text/html:
              schema:
                type: string
                example: ok
  /people:
    get:
      tags: [People]
      summary: Get all people list
      description: Returns list of all people
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
                uniqueItems: true
    post:
      tags: [People]
      summary: Create a person
      description: Creates a person with given parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonDraft"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
  /people/{person_id}:
    get:
      tags: [People]
      summary: Get person by id
      description: Returns a person with a given id
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/PersonId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
    delete:
      tags: [People]
      summary: Delete person by id
      description: Deletes a person with a given id forever?
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/PersonId"
      responses:
        204:
          description: Person was deleted
    patch:
      tags: [People]
      summary: Update a person
      description: Updates a person with a given id
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/PersonId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonDraft"
      responses:
        204:
          description: Person was updated
components:
  schemas:
    PersonId:
      type: integer
      description: A unique key of a person, autogenerated
      format: int64
      minimum: 1
      example: 12345678
    PersonName:
      type: string
      description: Either first or last person name
      pattern: ^[a-z ,.'-]{2, 32}$
      example: Ivan
    PersonDraft:
      type: object
      description: A draft of a person
      properties:
        first_name:
          $ref: "#/components/schemas/PersonName"
        last_name:
          $ref: "#/components/schemas/PersonName"
        pictures:
          type: array
          items:
            $ref: "#/components/schemas/Picture"
          minItems: 1
          maxItems: 8
          uniqueItems: true
        interests:
          type: array
          items:
            $ref: "#/components/schemas/Interest"
          minItems: 0
          maxItems: 8
          uniqueItems: true
        height:
          type: integer
          description: A height of the person in centimeters
          format: int32
          minimum: 50
          maximum: 280
          example: 172
        birthday:
          type: string
          description: A date when person was born
          format: date
        faculty:
          type: string
          description: Where does a person study
          enum:
            - Control Systems and Robotics
            - Software Engineering and Computer Systems
            - Information Technologies and Programming
            - Infocommunication Technologies
            - Physics
            - Infochemistry
            - Biotechnologies
        location:
          type: object
          properties:
            name:
              type: string
              description: User readable location name
              pattern: ^[A-Za-z ,.-]{3, 128}$
              example: ITMO University, Kronverkskiy Avenue
            coordinates:
              type: object
              properties:
                latitude:
                  type: number
                  description: The north-south position on the Earth surface
                  format: double
                  minimum: -90
                  maximum: 90
                  example: 59.957478
                longitude:
                  type: number
                  description: The east-west position on the Earth surface
                  format: double
                  minimum: 0
                  maximum: 180
                  example: 30.308014
              required:
                - latitude
                - longitude
          required:
            - name
            - coordinates
      required:
        - first_name
        - last_name
        - pictures
        - interests
    Person:
      description: A person, registered in a system
      allOf:
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/PersonId"
            zodiac_sign:
              type: string
              description: Astrological sign, caclulated based on a birthday
              enum:
                - aries
                - taurus
                - gemini
                - cancer
                - leo
                - virgo
                - libra
                - scorpio
                - sagittarius
                - capricorn
                - aquarius
                - pisces
            creation_moment:
              $ref: "#/components/schemas/UpdateMoment"
          required:
            - id
            - creation_moment
        - $ref: "#/components/schemas/PersonDraft"
    PictureUrl:
      type: string
      description: An URL of picture for downloading
      format: uri
      example: https://avatars.githubusercontent.com/u/53015676
    Picture:
      type: object
      properties:
        id:
          type: integer
          description: A unique key of a picture
          format: int64
          minimum: 1
          example: 12345678
        small:
          $ref: "#/components/schemas/PictureUrl"
        medium:
          $ref: "#/components/schemas/PictureUrl"
        large:
          $ref: "#/components/schemas/PictureUrl"
      required:
        - id
      anyOf:
        - required: [small]
        - required: [medium]
        - required: [large]
    Interest:
      type: object
      properties:
        topic:
          $ref: "#/components/schemas/Topic"
        level:
          type: integer
          description: A level of interest
          format: int32
          minimum: 1
          maximum: 5
      required:
        - topic
        - level
    Topic:
      type: object
      properties:
        id:
          type: integer
          description: A unique key of a topic
          format: int64
          minimum: 1
          example: 12345678
        name:
          type: string
          description: A unique name of a topic
          pattern: ^[a-z]{3, 32}$
          example: Programming
        icon:
          $ref: "#/components/schemas/Picture"
        color:
          type: string
          description: An RGB color in the hex format
          pattern: ^#([A-F0-9]{6}$
          example: "#6495ED"
      required:
        - id
        - name
        - icon
        - color
    UpdateMoment:
      type: string
      format: date-time
      description: A moment when this object was updated, autogenerated
      example: 2024-04-14T13:32:42Z
